{"version":3,"sources":["ItemRow.js","ItemTable.js","HeaderToggle.js","TableHeader.js","App.js","serviceWorker.js","index.js"],"names":["ItemRow","name","this","props","price","React","Component","ItemTable","itemLists","concat","slice","sort","a","b","itemList","map","itemDetails","key","sortedList","sortItems","bugsList","fishList","sortedItems","renderItems","HeaderToggle","onClick","title","TableHeader","bugsOnClick","fishOnClick","App","currentMonth","Date","toLocaleString","month","toLowerCase","bugs","require","console","log","Object","entries","rawItem","filter","seasonsNorthernHemisphere","fish","state","bugsIncluded","fishIncluded","setState","className","toggleBugs","toggleFish","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kmzFAEqBA,E,uKAEb,IAAMC,EAAOC,KAAKC,MAAMF,KAClBG,EAAQF,KAAKC,MAAMC,MACzB,OACI,4BACI,4BAAKH,GACL,4BAAKG,Q,GAPgBC,IAAMC,WCCtBC,E,0KACO,IAAC,IAAD,qBAAXC,EAAW,yBAAXA,EAAW,gBACpB,OAAO,EAAAA,EAAU,IAAGC,OAAb,oBAAuBD,EAAUE,MAAM,KAAIC,MAAM,SAACC,EAAEC,GAAH,OAASD,EAAER,MAAQS,EAAET,W,kCAGrEU,GACR,OAAOA,EAASC,KAAI,SAACC,GAGb,OAAO,kBAAC,EAAD,eAASC,IAAKD,EAAYf,MAAUe,S,+BAMnD,IAAME,EAAahB,KAAKiB,UAAUjB,KAAKC,MAAMiB,SAAUlB,KAAKC,MAAMkB,UAC5DC,EAAcpB,KAAKqB,YAAYL,GACrC,OACI,+BACI,+BACA,4BACI,oCACA,uCAGJ,+BACKI,Q,GA1BkBjB,IAAMC,WCDxBkB,G,6KAGb,OACI,4BAAQC,QAASvB,KAAKC,MAAMsB,SACvBvB,KAAKC,MAAMuB,W,GALcrB,IAAMC,YCC3BqB,E,uKAGb,OACI,oCACI,kBAAC,EAAD,CACID,MAAM,OACND,QAASvB,KAAKC,MAAMyB,cAExB,kBAAC,EAAD,CACIF,MAAM,OACND,QAASvB,KAAKC,MAAM0B,mB,GAXCxB,IAAMC,WCyEhCwB,E,kDApEX,WAAY3B,GAAQ,IAAD,sBACf,cAAMA,GACN,IACM4B,GADc,IAAIC,MACSC,eAAe,KAAM,CAACC,MAAO,UAAUC,cAGpEC,EAAOC,EAAQ,IACnBC,QAAQC,IAAIH,GACZ,IAAMhB,EAAWoB,OAAOC,QAAQL,GAAMrB,KAAI,SAAC2B,GAAD,OAAaA,EAAQ,MAC1DC,QAAO,SAAC3B,GAEL,OAAOA,EAAY4B,0BAA0Bb,MAIjDc,EAAOR,EAAQ,IACbhB,EAAWmB,OAAOC,QAAQI,GAAM9B,KAAI,SAAC2B,GAAD,OAAaA,EAAQ,MAC1DC,QAAO,SAAC3B,GAEL,OAAOA,EAAY4B,0BAA0Bb,MAnBtC,OAsBf,EAAKe,MAAQ,CACTC,cAAc,EACdC,cAAc,EACd5B,SAAUA,EACVC,SAAUA,GA1BC,E,yDA+BfnB,KAAK+C,SAAS,CAACF,cAAe7C,KAAK4C,MAAMC,iB,mCAIzC7C,KAAK+C,SAAS,CAACD,cAAe9C,KAAK4C,MAAME,iB,+BAGnC,IAAD,OACL,OACI,yBAAKE,UAAU,OACX,gCACI,uDAgBJ,kBAAC,EAAD,CAAatB,YAAa,kBAAM,EAAKuB,cACxBtB,YAAa,kBAAM,EAAKuB,gBACrC,kBAAC,EAAD,CACIhC,SAAUlB,KAAK4C,MAAMC,aAAe7C,KAAK4C,MAAM1B,SAAW,GAC1DC,SAAUnB,KAAK4C,MAAME,aAAe9C,KAAK4C,MAAMzB,SAAU,U,GA/D3DhB,IAAMC,WCKJ+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.922333dd.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default class ItemRow extends React.Component {\r\n    render() {\r\n        const name = this.props.name;\r\n        const price = this.props.price\r\n        return (\r\n            <tr>\r\n                <td>{name}</td>\r\n                <td>{price}</td>\r\n            </tr>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport ItemRow from \"./ItemRow\";\r\n\r\nexport default class ItemTable extends React.Component {\r\n    sortItems(...itemLists) {\r\n        return itemLists[0].concat(...itemLists.slice(1)).sort(((a,b) => a.price - b.price));\r\n    }\r\n\r\n    renderItems(itemList) {\r\n        return itemList.map((itemDetails) => {\r\n                // const itemDetails = item[1];\r\n                // console.log(itemDetails)\r\n                return <ItemRow key={itemDetails.name} {...itemDetails} />;\r\n            }\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const sortedList = this.sortItems(this.props.bugsList, this.props.fishList);\r\n        const sortedItems = this.renderItems(sortedList);\r\n        return (\r\n            <table>\r\n                <thead>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>Price</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {sortedItems}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\n\r\nexport default class HeaderToggle extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <button onClick={this.props.onClick}>\r\n                {this.props.title}\r\n            </button>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport HeaderToggle from \"./HeaderToggle\";\r\n\r\nexport default class TableHeader extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <HeaderToggle\r\n                    title=\"Bugs\"\r\n                    onClick={this.props.bugsOnClick}\r\n                />\r\n                <HeaderToggle\r\n                    title=\"Fish\"\r\n                    onClick={this.props.fishOnClick}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}","// import React from 'react';\nimport React from 'react';\nimport ItemTable from './ItemTable';\nimport './App.css';\nimport HeaderToggle from \"./HeaderToggle\";\nimport TableHeader from \"./TableHeader\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        const currentDate = new Date();\n        const currentMonth = currentDate.toLocaleString('en', {month: 'short'}).toLowerCase();\n\n        // Load bugs\n        let bugs = require('./bugs.json');\n        console.log(bugs);\n        const bugsList = Object.entries(bugs).map((rawItem) => rawItem[1]) // Gets the details as the top level object\n            .filter((itemDetails) => {\n                //console.log(itemDetails.seasonsNorthernHemisphere)\n                return itemDetails.seasonsNorthernHemisphere[currentMonth];\n            });\n\n        // Load fish\n        let fish = require('./fish.json');\n        const fishList = Object.entries(fish).map((rawItem) => rawItem[1]) // Gets the details as the top level object\n            .filter((itemDetails) => {\n                //console.log(itemDetails.seasonsNorthernHemisphere)\n                return itemDetails.seasonsNorthernHemisphere[currentMonth];\n            });\n\n        this.state = {\n            bugsIncluded: true,\n            fishIncluded: true,\n            bugsList: bugsList,\n            fishList: fishList,\n        };\n    }\n\n    toggleBugs() {\n        this.setState({bugsIncluded: !this.state.bugsIncluded})\n    }\n\n    toggleFish() {\n        this.setState({fishIncluded: !this.state.fishIncluded})\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header>\n                    <h2>Animal Crossing Prices</h2>\n                </header>\n                {/*<header className=\"App-header\">*/}\n                {/*  <img src={logo} className=\"App-logo\" alt=\"logo\" />*/}\n                {/*  <p>*/}\n                {/*    Edit <code>src/App.js</code> and save to reload.*/}\n                {/*  </p>*/}\n                {/*  <a*/}\n                {/*    className=\"App-link\"*/}\n                {/*    href=\"https://reactjs.org\"*/}\n                {/*    target=\"_blank\"*/}\n                {/*    rel=\"noopener noreferrer\"*/}\n                {/*  >*/}\n                {/*    Learn React*/}\n                {/*  </a>*/}\n                {/*</header>*/}\n                <TableHeader bugsOnClick={() => this.toggleBugs()}\n                             fishOnClick={() => this.toggleFish()}/>\n                <ItemTable\n                    bugsList={this.state.bugsIncluded ? this.state.bugsList : []}\n                    fishList={this.state.fishIncluded ? this.state.fishList: []}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}